// Java program to calculate SHA-1, SHA-128, SHA-224, SHA-256, SHA-384, SHA-512 hash value 

import java.math.BigInteger; 
import java.security.MessageDigest; 
import java.security.NoSuchAlgorithmException; 

public class SHA { 
	public static String encryptSHA1(String input) 
	{ 
		try { 
			// getInstance() method is called with algorithm SHA-384 
			MessageDigest md = MessageDigest.getInstance("SHA-1"); 

			// digest() method is called 
			// to calculate message digest of the input string 
			// returned as array of byte 
			byte[] messageDigest = md.digest(input.getBytes()); 

			// Convert byte array into signum representation 
			BigInteger no = new BigInteger(1, messageDigest); 

			// Convert message digest into hex value 
			String hashtext = no.toString(16); 

			// Add preceding 0s to make it 32 bit 
			while (hashtext.length() < 32) { 
				hashtext = "0" + hashtext; 
			} 

			// return the HashText 
			return hashtext; 
		} 

		// For specifying wrong message digest algorithms 
		catch (NoSuchAlgorithmException e) { 
			throw new RuntimeException(e); 
		} 
	} 
	public static String encryptSHA224(String input) 
	{ 
		try { 
			// getInstance() method is called with algorithm SHA-384 
			MessageDigest md = MessageDigest.getInstance("SHA-224"); 

			// digest() method is called 
			// to calculate message digest of the input string 
			// returned as array of byte 
			byte[] messageDigest = md.digest(input.getBytes()); 

			// Convert byte array into signum representation 
			BigInteger no = new BigInteger(1, messageDigest); 

			// Convert message digest into hex value 
			String hashtext = no.toString(16); 

			// Add preceding 0s to make it 32 bit 
			while (hashtext.length() < 32) { 
				hashtext = "0" + hashtext; 
			} 

			// return the HashText 
			return hashtext; 
		} 

		// For specifying wrong message digest algorithms 
		catch (NoSuchAlgorithmException e) { 
			throw new RuntimeException(e); 
		} 
	} 
	public static String encryptSHA256(String input) 
	{ 
		try { 
			// getInstance() method is called with algorithm SHA-384 
			MessageDigest md = MessageDigest.getInstance("SHA-256"); 

			// digest() method is called 
			// to calculate message digest of the input string 
			// returned as array of byte 
			byte[] messageDigest = md.digest(input.getBytes()); 

			// Convert byte array into signum representation 
			BigInteger no = new BigInteger(1, messageDigest); 

			// Convert message digest into hex value 
			String hashtext = no.toString(16); 

			// Add preceding 0s to make it 32 bit 
			while (hashtext.length() < 32) { 
				hashtext = "0" + hashtext; 
			} 

			// return the HashText 
			return hashtext; 
		} 

		// For specifying wrong message digest algorithms 
		catch (NoSuchAlgorithmException e) { 
			throw new RuntimeException(e); 
		} 
	} 
	public static String encryptSHA384(String input) 
	{ 
		try { 
			// getInstance() method is called with algorithm SHA-384 
			MessageDigest md = MessageDigest.getInstance("SHA-384"); 

			// digest() method is called 
			// to calculate message digest of the input string 
			// returned as array of byte 
			byte[] messageDigest = md.digest(input.getBytes()); 

			// Convert byte array into signum representation 
			BigInteger no = new BigInteger(1, messageDigest); 

			// Convert message digest into hex value 
			String hashtext = no.toString(16); 

			// Add preceding 0s to make it 32 bit 
			while (hashtext.length() < 32) { 
				hashtext = "0" + hashtext; 
			} 

			// return the HashText 
			return hashtext; 
		} 

		// For specifying wrong message digest algorithms 
		catch (NoSuchAlgorithmException e) { 
			throw new RuntimeException(e); 
		} 
	} 
	public static String encryptSHA512(String input) 
	{ 
		try { 
			// getInstance() method is called with algorithm SHA-384 
			MessageDigest md = MessageDigest.getInstance("SHA-512"); 

			// digest() method is called 
			// to calculate message digest of the input string 
			// returned as array of byte 
			byte[] messageDigest = md.digest(input.getBytes()); 

			// Convert byte array into signum representation 
			BigInteger no = new BigInteger(1, messageDigest); 

			// Convert message digest into hex value 
			String hashtext = no.toString(16); 

			// Add preceding 0s to make it 32 bit 
			while (hashtext.length() < 32) { 
				hashtext = "0" + hashtext; 
			} 

			// return the HashText 
			return hashtext; 
		} 

		// For specifying wrong message digest algorithms 
		catch (NoSuchAlgorithmException e) { 
			throw new RuntimeException(e); 
		} 
	} 
	

	// Driver code 
	public static void main(String args[]) throws
								NoSuchAlgorithmException 
	{ 

		System.out.println("HashCode Generated by SHA-384 for: "); 

		String s1 = "abc"; 
		System.out.println("\n" + s1 + " : " + encryptSHA1(s1)); 
		// System.out.println("\n" + s1 + " : " + encryptSHA128(s1)); 
		System.out.println("\n" + s1 + " : " + encryptSHA224(s1)); 
		System.out.println("\n" + s1 + " : " + encryptSHA256(s1)); 
		System.out.println("\n" + s1 + " : " + encryptSHA384(s1)); 
		System.out.println("\n" + s1 + " : " + encryptSHA512(s1)); 

		String s2 = "abcd"; 
		System.out.println("\n" + s2 + " : " + encryptSHA384(s2)); 
	} 
} 
